<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <arg name="topic_drive_param" value="/input/drive_param/autonomous" />
    
  <arg name="map" default="$(find f1tenth_simulator)/maps/berlin.yaml"/>
  <node pkg="map_server" name="map_server" type="map_server" args="$(arg map)"/>

  <!-- Launch the racecar model -->
  <include file="$(find f1tenth_simulator)/launch/racecar_model.launch"/>

  <!-- Begin the simulator with the parameters from params.yaml -->
  <node pkg="f1tenth_simulator" name="f1tenth_simulator" type="simulator" output="screen">
    <rosparam command="load" file="$(find f1tenth_simulator)/params.yaml"/>
  </node>

  <!-- Launch the mux node with the parameters from params.yaml -->
  <node pkg="f1tenth_simulator" name="mux_controller" type="mux" output="screen">
    <rosparam command="load" file="$(find f1tenth_simulator)/params.yaml"/>
  </node>
    
  <arg name="joystick_type" default="xbox360"/>
  <arg name="record" default="false"/>
  <arg name="videohd" default="false"/>
  <arg name="bfresults" default="/tmp/results.csv"/>
  <arg name="bfconf" default="/tmp/default.yaml"/>

  <!-- RVIZ Display
      1 show normal drive mode
      2 show f1tenth simlator default perspective
      0 disable rviz display for bath simulation mode
  -->
  <arg name="show_rviz" default="0"/>

  <!-- Mode Override
      1 forces manual driving
      2 forces autonomous driving
      0 uses user input to enable the modes
  -->
  <arg name="mode_override" default="2"/>

  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find racer_description)/urdf/racer.xacro'"/>

  <include file="$(find car_control)/launch/car_control.launch">
      <arg name="mode_override" value="$(arg mode_override)"/>
  </include>

  <include file="$(find vesc_driver)/launch/vesc_driver_node.launch"/>

  <rosparam command="load" file="$(find vesc_sim)/config/car_config.yaml"/>

  <!--<include file="$(find vesc_ackermann)/launch/vesc_to_odom_node.launch"/>-->

  <include file="$(find wallfollowing5)/launch/autonomous_driving_physical.launch">
    <arg name="topic_drive_param" value="/input/drive_param/autonomous" />
  </include>

  <node pkg="car_config" type="dynamic_physical_properties" name="dynamic_physical_properties" respawn="true" output="screen"/>
  
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen"/>

  <include file="$(find hardware)/launch/static_wheel_publisher.launch"/>
  
  <group if="$(eval arg('show_rviz') == 2)">
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find racer_world)/launch/rviz_config.rviz"/>
    <node pkg="rviz" type="rviz" name="rviz2" args="-d $(find f1tenth_simulator)/launch/simulator.rviz" output="screen"/>
  </group>
  <group if="$(eval arg('show_rviz') == 1)">
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find racer_world)/launch/rviz_config.rviz"/>
  </group>

  <include file="$(find boxing)/launch/boxing.launch">
    <arg name="topic_input_cloud" value="/scan/lidar/cartesian" />
    <arg name="topic_input_colored_cloud" value="/racer/camera1/depth/points" />
    <arg name="topic_voxels" value="/scan/voxels" />
  </include>

  <include file="$(find voxel_classifier)/launch/voxel_classifier.launch">
    <arg name="topic_input_voxels" value="/scan/voxels" />
    <arg name="topic_output_clusters" value="/scan/clusters" />
  </include>

  <include file="$(find wall_detection)/launch/wall_detection.launch">
    <arg name="topic_input_clusters" value="/scan/clusters" />
    <arg name="topic_output_walls" value="/obstacles/walls" />
    <arg name="topic_output_obstacles" value="/obstacles/obstacles" />
  </include>

  <!--<include file="$(find avoid_static_obstacles)/launch/avoid_static_obstacles.launch"/>-->
 
  <include file="$(find car_tf)/launch/car_transformer.launch" />

  <node pkg="analysis-tools" type="bruteforce_reward" name="bruteforce_reward" respawn="true" output="screen">
    <param name="average" value="1000" />
    <param name="bfresults" value="$(arg bfresults)" />
  </node>
</launch>
